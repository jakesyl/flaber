// **********************// ElementHandlerMC class// **********************class as.interface_element.ElementHandlerMC extends MovieClip{	// private variables	private var mc_ref:MovieClip;						// interface for the edit panel mc	private var target_ref:MovieClip;				// reference to the controlling mc    		// ***********	// constructor	// ***********	public function ElementHandlerMC ()	{		mc_ref = this;		mc_ref.attachMovie ("lib_frame_mc", "frame_mc", -16384, {_x:0, _y:0});		mc_ref.menu = new ContextMenu (_root.custom_context.menu_builder);				set_size (50, 25);				setup_move_frame ();		setup_resize_button ();		setup_rotate_button ();		setup_delete_button ();				throw_away ();	}		// **************	// set target ref	// **************	public function set_target_ref (m:MovieClip):Void	{		target_ref = m;		mc_ref.content_field.text = m._name;	}	// **************	// get target ref	// **************	public function get_target_ref ():MovieClip	{		return (target_ref);	}		// ********	// set size	// ********	private function set_size (w:Number, h:Number):Void	{		// clear all frame first		mc_ref.frame_mc.clear_frame ();		mc_ref.frame_mc.draw_rect (0, 0, w, h, 2, 0x666666, 50, 0xFFFFFF, 50);				// set handler button positions		mc_ref.resize_button._x = w - 4;		mc_ref.resize_button._y = h - 4;				mc_ref.rotate_button._y = h - 4;				mc_ref.delete_button._x = w - 4;				mc_ref.center_mc._x = w / 2 - 4;		mc_ref.center_mc._y = h / 2 - 4;				// reset text field size and position		mc_ref.content_field._y = h / 2 - 16;		mc_ref.content_field._width = w;	}		// ************	// set position	// ************	public function set_position (x:Number, y:Number, r:Number):Void	{		mc_ref._x = x;		mc_ref._y = y;		mc_ref._rotation = r;	}	// ************	// set function	// ************	public function set_function (a:Array, b:Array):Void	{		for (var i in a)		{			var temp_name:String = "";			temp_name = a [i] + "_button";			mc_ref [temp_name].enabled = true;			mc_ref [temp_name]._visible = true;		}				for (var i in b)		{			var temp_name:String = "";			temp_name = b [i] + "_button";			trace (temp_name);			mc_ref [temp_name].enabled = false;			mc_ref [temp_name]._visible = false;		}	}	// **********	// bring back	// **********	public function bring_back ():Void	{		mc_ref._visible = true;		mc_ref.enabled = true;	}	// **********	// throw away	// **********	public function throw_away ():Void	{		mc_ref._visible = false;		mc_ref.enabled = false;	}	//	****************	// setup move frame	// ****************	private function setup_move_frame ():Void	{		mc_ref.frame_mc ["class_ref"] = mc_ref;				// onrollover override		mc_ref.frame_mc.onRollOver = function ()		{			_root.tooltip_mc.set_content ("Move");		}				// onrollover override		mc_ref.frame_mc.onRollOut = function ()		{			_root.tooltip_mc.throw_away ();		}				// onpress override		mc_ref.frame_mc.onPress = function ()		{			_root.tooltip_mc.throw_away ();			this.class_ref.target_ref.startDrag ();			this.class_ref._visible = false;		}				// onrelease override		mc_ref.frame_mc.onRelease = function ()		{			this.class_ref.target_ref.stopDrag ();						// position fixer			this.class_ref.target_ref._x = Math.round (this.class_ref.target_ref._x);			this.class_ref.target_ref._y = Math.round (this.class_ref.target_ref._y)						this.class_ref.target_ref.pull_handler ("not first");			this.class_ref._visible = true;		}				// onreleaseoutside override		mc_ref.frame_mc.onReleaseOutside = function ()		{			this.onRelease ();		}			}	// *******************	// setup resize button	// *******************	private function setup_resize_button ():Void	{		mc_ref.resize_button ["class_ref"] = mc_ref;				// onrollover override		mc_ref.resize_button.onRollOver = function ()		{			_root.tooltip_mc.set_content ("Resize");		}				// onrollout override		mc_ref.resize_button.onRollOut = function ()		{			_root.tooltip_mc.throw_away ();		}				// onpress override		mc_ref.resize_button.onPress = function ()		{			_root.tooltip_mc.throw_away ();			this.class_ref.target_ref.resize_function (1);			this.class_ref._visible = false;		}				// onrelease override		mc_ref.resize_button.onRelease = function ()		{			this.class_ref.target_ref.resize_function (-1);			this.class_ref._visible = true;		}				// onreleaseoutside override		mc_ref.resize_button.onReleaseOutside = function ()		{			this.onRelease ();		}	}	// *******************	// setup rotate button	// *******************	private function setup_rotate_button ():Void	{		mc_ref.rotate_button ["class_ref"] = mc_ref;				// onrollover override		mc_ref.rotate_button.onRollOver = function ()		{			_root.tooltip_mc.set_content ("Rotate");		}				// onrollout override		mc_ref.rotate_button.onRollOut = function ()		{			_root.tooltip_mc.throw_away ();		}				// onpress override		mc_ref.rotate_button.onPress = function ()		{			_root.tooltip_mc.throw_away ();			this.class_ref.target_ref.rotate_function (1);			this.class_ref._visible = false;					}				// onrelease override		mc_ref.rotate_button.onRelease = function ()		{			this.class_ref.target_ref.rotate_function (-1);			this.class_ref.target_ref.pull_handler ("not first");			this.class_ref._visible = true;		}				// onreleaseoutside override		mc_ref.rotate_button.onReleaseOutside = function ()		{			this.onRelease ();		}	}	// *******************	// setup delete button	// *******************	private function setup_delete_button ():Void	{		mc_ref.delete_button ["class_ref"] = mc_ref;				// onrollover override		mc_ref.delete_button.onRollOver = function ()		{			_root.tooltip_mc.set_content ("Delete");		}				// onrollout override		mc_ref.delete_button.onRollOut = function ()		{			_root.tooltip_mc.throw_away ();		}				// onrelease override		mc_ref.delete_button.onRelease = function ()		{			_root.tooltip_mc.throw_away ();			this.class_ref.throw_away ();			_root.sys_func.remove_window_mc ();			_root.attachMovie ("lib_window", "window_mc", 9999);			_root.window_mc.set_window_data ("Delete Confirmation", 190, 120, "lib_dialogue_delete_confirm");			_root.window_mc.content_mc.set_target_ref (mc_ref);		}	}}
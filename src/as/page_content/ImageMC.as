// *************// ImageMC class// *************class as.page_content.ImageMC extends as.page_content.PageElementMC{	// private variables	private var mc_url:String;		private var stored_width:Number;	private var stored_height:Number;		// ***********	// constructor	// ***********	public function ImageMC ()	{		mc_ref.attachMovie ("lib_clip_loader_mc", "clip_mc", 1, {_x: 0, _y: 0});	}		// ***************	// pull edit panel	// ***************	public function pull_handler (s:String):Void	{		if (s == "first")		{			_root.handler_mc.bring_back ();			_root.handler_mc.set_function (["resize", "rotate", "delete"], null);		}				var temp_dimension:Object = new Object ();		temp_dimension = mc_ref.clip_mc.get_display_dimension ();			_root.handler_mc.set_position (mc_ref._x, mc_ref._y, mc_ref.clip_mc._rotation);		_root.handler_mc.set_size (temp_dimension ["width"], temp_dimension ["height"]);	}		// ***************	// resize function	// ***************	// override existing resize function	public function resize_function (n:Number):Void	{		var temp_obj:Object = new Object;		temp_obj = mc_ref.clip_mc.get_display_dimension ();		stored_width = temp_obj ["width"];		stored_height = temp_obj ["height"];				super.resize_function (n);	}		// ************************	// resize interval function	// ************************	public function resize_interval_function ():Void	{		var target_width:Number;		var target_height:Number;				target_width = _root.handler_mc._xmouse;		target_height = _root.handler_mc._ymouse;				// preventing the object too small...		target_height = Math.max (target_height, 10);		target_width = Math.max (target_width, 10);				if (Key.isDown (Key.SHIFT))		{			// shift will have scale resize			var temp_ratio:Number;			temp_ratio = Math.min (target_width / stored_width, target_height / stored_height);			target_width = stored_width * temp_ratio;			target_height = stored_height * temp_ratio;		}				mc_ref.clip_mc.set_display_dimension (target_width, target_height);		mc_ref.clip_mc.update_display_dimension ();	}	// ************************	// rotate interval function	// ************************	private function rotate_interval_function (r:Number):Void	{		mc_ref.clip_mc._rotation = r;	}	// *******************	// properties function	// *******************	public function properties_function ():Void	{		_root.sys_func.remove_window_mc ();		_root.attachMovie ("lib_window", "window_mc", 9999);		_root.window_mc.set_window_data ("Image Properties Window", 620, 500, "lib_properties_image");		_root.window_mc.content_mc.set_target_ref (mc_ref);	}	// ***************	// data_xml setter	// ***************	public function set_data_xml (x:XMLNode):Void	{		var temp_width:Number;		var temp_height:Number;		var temp_rotation:Number;				for (var i in x.childNodes)		{			var temp_node:XMLNode;			var temp_name:String;			var temp_value:String;						temp_node = x.childNodes [i];			temp_name = temp_node.nodeName;			temp_value = temp_node.firstChild.nodeValue;						switch (temp_name)			{				// x position of the image				case "x":				{					mc_ref._x = parseInt (temp_value);					break;				}				// y position of the image				case "y":				{					mc_ref._y = parseInt (temp_value);					break;				}				// width of the image				case "width":				{					temp_width = parseInt (temp_value);					break;				}				// height of the image				case "height":				{					temp_height = parseInt (temp_value);					break;				}				// rotation of the image				case "rotation":				{					temp_rotation = parseInt (temp_value);					break;				}				// path of the image				case "url":				{					mc_url = temp_value;					break;				}			}					}				if (temp_width != undefined && temp_height != undefined)		{			mc_ref.clip_mc.set_display_dimension (temp_width, temp_height);		}				mc_ref.clip_mc._rotation = temp_rotation;		mc_ref.clip_mc.set_clip_mc (mc_url);	}	// **********	// export xml	// **********	public function export_xml ():XMLNode	{		var out_xml:XML = new XML ();				var root_node:XMLNode;		var temp_node:XMLNode;		var temp_node_2:XMLNode;				// building root node		root_node = out_xml.createElement ("ImageMC");		root_node.attributes.depth = mc_ref.getDepth ();				// x of image		temp_node = out_xml.createElement ("x");		temp_node_2 = out_xml.createTextNode (mc_ref._x.toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// y of image		temp_node = out_xml.createElement ("y");		temp_node_2 = out_xml.createTextNode (mc_ref._y.toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);		// width of image		temp_node = out_xml.createElement ("width");		temp_node_2 = out_xml.createTextNode (mc_ref.clip_mc.get_display_dimension () ["width"].toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// height of image		temp_node = out_xml.createElement ("height");		temp_node_2 = out_xml.createTextNode (mc_ref.clip_mc.get_display_dimension () ["height"].toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// rotation of image		temp_node = out_xml.createElement ("rotation");		temp_node_2 = out_xml.createTextNode (mc_ref.clip_mc._rotation.toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// url of image		temp_node = out_xml.createElement ("url");		temp_node_2 = out_xml.createTextNode (mc_ref.mc_url);		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// export the xml node to whatever place need this		return (root_node);	}	// **********	// get mc url	// **********	public function get_mc_url ():String	{		return (mc_url);	}}
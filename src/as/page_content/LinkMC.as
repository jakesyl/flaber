// ************// LinkMC class// ************class as.page_content.LinkMC extends as.page_content.PageElementMC{	// private variables	private var mc_ref:MovieClip;						// interface for the link mc		private var link_type:Number;						// internal link or external	private var link_url:String;						// url of the link content		private var FILE_NAME:String = "(LinkMC.as)";		// for tracer		// ***********	// constructor	// ***********	public function LinkMC ()	{		mc_ref = this;		mc_ref.onRelease = function ()		{			onRelease_event_special ();		}				mc_ref.onRollOver = function ()		{			onRollOver_event_special ();		}				mc_ref.onRollOut = function ()		{			onRollOut_event ();		}			}		// *********************	// transition out action	// *********************	public function transition_out_action ():Void	{		_root.page_mc.load_root_xml (link_url);	}		// **************************	// onrelease special override	// **************************	public function onRelease_event_special ():Void	{		switch (link_type)		{			// internal link			case 0:			{				// loading new contents				if (_root.mc_transitions != null)				{					_root.mc_transitions.set_mc_ref (mc_ref);					_root.mc_transitions.start_transition ("out");				}				else				{					_root.page_mc.load_root_xml (link_url);				}				break;			}			// external link			case 1:			{				// loading external content				_root.sys_func.build_popup (800, 600, "", link_url, 1);				break;			}		}	}		// ***************************	// onrollover special override	// ***************************	public function onRollOver_event_special ():Void	{		_root.tooltip_mc.set_content (link_url);	}	// ************	// pull handler	// ************	public function pull_handler (s:String):Void	{		var temp_width:Number;		var temp_height:Number;				if (mc_ref.content_mc instanceof as.page_content.TextFieldMC)		{			temp_width = mc_ref.content_mc._width;			temp_height = mc_ref.content_mc._height;		}		else if (mc_ref.content_mc instanceof as.page_content.ImageMC)		{			var temp_obj:Object = new Object ();			temp_obj = mc_ref.content_mc.clip_mc.get_display_dimension ();			temp_width = temp_obj ["width"];			temp_height = temp_obj ["height"];		}				if (s == "first")		{			_root.handler_mc.bring_back ();			_root.handler_mc.set_function (["delete"], ["resize", "rotate"]);		}				_root.handler_mc.set_size (temp_width, temp_height);		_root.handler_mc.set_position (mc_ref._x, mc_ref._y, 0);	}	// *******************	// properties function	// *******************	public function properties_function ():Void	{		_root.sys_func.remove_window_mc ();		_root.attachMovie ("lib_window", "window_mc", 9999);		_root.window_mc.set_window_data ("Link Properties Window", 300, 310, "lib_properties_link");		_root.window_mc.content_mc.set_target_ref (mc_ref);	}	// *****************	// broadcaster event	// *****************	public function broadcaster_event (o:Object):Void	{		if (o == true)		{						delete mc_ref.onRollOver;			delete mc_ref.onRelease;						mc_ref.onRollOver = function ()			{				onRollOver_event ();			}						mc_ref.onPress = function ()			{				onPress_event ();			}						mc_ref.onRelease = function ()			{				onRelease_event ();			}		}		else		{			delete mc_ref.onRollOver;			delete mc_ref.onPress;						mc_ref.onRollOver = function ()			{				onRollOver_event_special ();			}						mc_ref.onRelease = function ()			{				onRelease_event_special ();			}		}	}	// ***************	// data_xml setter	// ***************	public function set_data_xml (x:XMLNode):Void	{		for (var i in x.childNodes)		{			var temp_node:XMLNode;			var temp_name:String;			var temp_value:String;						temp_node = x.childNodes [i];			temp_name = temp_node.nodeName;			temp_value = temp_node.firstChild.nodeValue;						switch (temp_name)			{				// x position of the link				case "x":				{					mc_ref._x = parseInt (temp_value);					break;				}				// y position of the link				case "y":				{					mc_ref._y = parseInt (temp_value);					break;				}				// link type				case "type":				{					link_type = parseInt (temp_value);					break;				}				// link url				case "url":				{					link_url = temp_value;					break;				}				// textfield inside the link				case "TextFieldMC":				{					if (mc_ref.content_mc)					{						mc_ref.content_mc.removeMovieClip ();					}										mc_ref.attachMovie ("lib_page_content_textfield", "content_mc", 0);					mc_ref.content_mc.set_data_xml (temp_node);					break;				}				// image inside the link				case "ImageMC":				{					if (mc_ref.content_mc)					{						mc_ref.content_mc.removeMovieClip ();					}										mc_ref.attachMovie ("lib_page_content_image", "content_mc", 0);					mc_ref.content_mc.set_data_xml (temp_node);					break;				}								// exception				default:				{					_root.status_mc.add_message (FILE_NAME + " node skipped with node name '" + temp_name + "'", "critical");					break;				}			}		}	}		// **********	// export xml	// **********	public function export_xml ():XMLNode	{		var out_xml:XML;				var root_node:XMLNode;		var temp_node:XMLNode;		var temp_node_2:XMLNode;				out_xml = new XML ();				// building root node		root_node = out_xml.createElement ("LinkMC");		root_node.attributes.depth = mc_ref.getDepth ();				// x of link		temp_node = out_xml.createElement ("x");		temp_node_2 = out_xml.createTextNode (mc_ref._x.toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// y of link		temp_node = out_xml.createElement ("y");		temp_node_2 = out_xml.createTextNode (mc_ref._y.toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// type of link		temp_node = out_xml.createElement ("type");		temp_node_2 = out_xml.createTextNode (link_type.toString ());		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// url of link		temp_node = out_xml.createElement ("url");		temp_node_2 = out_xml.createTextNode (link_url);		temp_node.appendChild (temp_node_2);		root_node.appendChild (temp_node);				// all the contents inside the link		if (mc_ref.content_mc)		{			temp_node = mc_ref.content_mc.export_xml ();			root_node.appendChild (temp_node);		}				// export the xml node to whatever place need this		return (root_node);	}	// *************	// get link type	// *************	public function get_link_type ():Number	{		return (link_type);	}		// ************	// get link url	// ************	public function get_link_url ():String	{		return (link_url);	}}